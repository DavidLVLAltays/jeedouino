=== Creation of equipment

Jeedouino equipment configuration is available from the Plugins menu: 

image::../images/menuplugin.png[]

This is the page of the Jeedouino plugin (here with equipment already): 

image::../images/equipements.png[]

[TIP]
As in many places on Jeedom, place the mouse to the left allows to show a quick access menu (you can, from your profile, let it always visible).

Once you click the + (Add a new equipment), and after giving a name to your device, you obtain: 

image::../images/equipements0.png[]

You will find here all the configuration of your equipment: 

* *Name of the equipment*: name of your Jeedouino equipment.
* *Parent object*: Specifies the parent object that owns the equipment,
* *Activate*: to make your equipment active,
* *Visible*: makes your equipment visible on the dashboard.

Below you will find how to set up your equipment: 

* *Model*: the model of the board you want to control,

image::../images/modeles.png[]

_For PiFace board, a number (0 to 3) is asked to identify it (If you have a piRack eg.)_

image::../images/piface.png[]
* *Connection type* : USB or LAN port,
* *Address IP and Port*: for the connection to the card via the network.
[WARNING]
Daemons (GPIO and Piface eg.) which could beings on the same Jeedom, make sure to use different ports for each. Normally, the creation of an equipment, a free port is offered. +
_If necessary, the daemon will try to choose another port instead of the one indicated if it is impossible to use it._

[IMPORTANT]
The port must be different from the host Jeedom.
[TIP]
_Following browsers, an arrow appears to directly select an IP amongst your Jeedom._ +.
You can also use _local_ or _localhost_ for the IP address of the Jeedom (master).

image::../images/listeIP.png[]
* *USB port*: Local or remote, for connection of Jeedom master or slave to the board via its USB port,
* *Port Local / Remote Port*: Port USB physical where boad is connected,
** If you unplug / plug in the USB port of the RPI , you need to restart the corresponding daemon.

image::../images/listeUSB.png[]
* *Daemon port *: for the connection to the daemon via the network, the IP of the daemon is the one of the Jeedom host.
[WARNING]
Daemons (Arduino USB eg.) which could beings on the same Jeedom, make sure to use different ports for each. Normally, the creation of an equipment, a free port is offered. +
_If necessary, the daemon will try to choose another port instead of the one indicated if it is impossible to use it._
[IMPORTANT]
The port must be different from the host Jeedom.
* *Sketch*: in the case of a card Arduino or ESP8266, the sketch for it is proposed to download after a first backup of equipment. +
(NB. Refreshing the page, it may be necessary to do an F5 to see the link)
[NOTE]
For Ethernet (Arduinos) models, it is specifically generated, taking into account the IP address chosen, the selected port, and a unique mac address. 
 _As IP, the add-in '/jeedom' (or not) and the port of the master Jeedom (according to your network in Jeedom configuration). _
[TIP]
_The sketch is by default for the shields with W5100 chip, but it can work also with the ENC28J60. In this case, it is needed to read and apply the procedure in the header of the sketch._

image::../images/sketch.png[]
[NOTE]
For WiFi models (ESP8266), it is specifically generated, taking into account the port, the SSID, and wifi password, the IP address is returned by the card (if dhcp mode).
 _As IP, the add-in '/jeedom' (or not) and the port of the master Jeedom (according to your network in Jeedom configuration). _
_NB. You must indicate the IP address the first time._

[WARNING]
The _SSID_ and _password_ should not contain spaces!

image::../images/ESP.png[]

==== Pin Configuration

* Modal Parameters / pin assignment

Selects appropriate pin and assign a type input (info) or output (action). + 
_NB: The information supplements are available in the FAQ._ +

** Inputs: Analog, Digital, Pulse Counter
** Outputs: Low (= 0 = GND), High (= Vcc = 1), Switch (reverse output), Pulse (the output to low or high for a limited time - ex.:activate momentarily, via a relay , a remote control switch, solenoid valve, a component, a dry contact, etc ..). 

image::../images/jeedouino_screenshot4.png[]

[IMPORTANT]
* _The pin will be configured only after an initial backup of your equipment ._ + 
Once configured and saved (in the modal window), a backup of the equipment will generate all necessary commands.
[NOTE]
It is not useful to provide a function to each pin, but only those you need.
This will prevent the generation of unnecessary controls and overload Jeedom.

[TIP]
It is now possible to configure the generic kind directly and affect the pin to groups (equipment) Virtual, see the FAQ.

* Modal Settings / User pin assignment

image::../images/UserPins.png[]

* Tab Pins / GPIO +

Allows you to add a number of pin user for your sketch Arduinos/ESP: _0 to 100 max_ +.

It is possible to activate or not the automatic generation of commandes ALL_*

** ALL_LOW puts all output pins to LOW
** ALL_HIGH puts all output pins to HIGH
** ALL_SWITCH reverse all the output pins
** ALL_PULSE_LOW puts all output pins to LOW during the selected time
** ALL_PULSE_HIGH puts all output pins to HIGH during the selected time

image::../images/ALLpins.png[]

==== Commands 

image::../images/jeedouino_screenshot5.png[]
* *Backup equipment*: Commands are automatically generated, the daemon is started if necessary, the configuration of the pin is sent to the board (Arduino, RPI, PiFace) and some other settings.
Ansi, the rotating cogwheel may not disappear for a while. So do not be concerned.



* Commands are automatically created when saving equipment.

** It is of course possible to rename the controls.
[NOTE]
For each control type 'action', a type of command 'info' of feedback state is also created _ (if useful) _.

* The _Show_ _Logging_ buttons are the usual display buttons (or not) of the command on the widget and its logging (or not).

* The Invert button (column display) _ can reverse the result of a command info (binary subtype) on the dashboard for example.

* The Invert button (Value column) _ can reverse the result of a command info (binary subtype) before providing it to Jeedom.

* The Test button permit to test ... an action command.

It is now not expected to be able to add commands manually.

[TIP]
For type info command 'counter', they are reset to the value stored in the equipment at each backup of it.
Conversely, after a reboot of the Arduino (eg.), The last value is recovered from the master Jeedom.
If a communication error occurs at this moment, the counter will be reset to zero. + 
Arduino / ESP / NodeMCU / Wemos, it is possible to re-initialize to a specific value, an option "reset" is present on the control of the equipment concerned.

==== Widgets

It is those by default of Jeedom.

Desktop widgets are similar to this:

image::../images/desktop_widget.png[]
