=== FAQ

==== User Sketchs and user commands

===== Headings of sketches
With the news fonctionnalities, sketch vould become too heavy for the smaller Arduinos. +
So it is possible to disable some in order to light the sketchs if needed. +
You will find this possibility in the sketchs header : 

[NOTE]
*#define DEBUGtoSERIAL 0*	// 0, ou 1 pour debug dans la console serie +
*#define UseWatchdog 0* +
*#define UseDHT 1* +
*#define UseDS18x20 1* +
*#define UseTeleInfo 0* +
*#define UseLCD16x2 0*	// 0 = None(Aucun) / 1 = LCD Standard 6 pins / 2 = LCD via I2C +
_For your user sketch_ +
*#define UserSketch 0* +
_Tags to seek place for your code :_ +
_UserVars_ +
_UserSetup_ +
_UserLoop_ +

For the ESP sketches, it is also possible to let the system get a free IP (DHCP)
or to force if necessary.
[TIP]
*#define NODHCP 0*					// 0 for IP via DHCP, 1 for IP fixed in the sketch.

===== User sketchs and pins 
For your personal sketches, just look in them, they are fitted in with examples. +
[NOTE]
Remember to activate the option in the plugin configuration page, and select the number of pins you want on the Pins / GPIO tab of your device. +
They will appear in the User Pins tab (next to that of the Material Pins) in the modal window.

Commands related side Jeedom, just set them up as for material pine.

* You can choose between 3 types of input and 3 types of output :
** Input digital (subtype: binary)
** Input digital (subtype: digital)
** Input digital (sub-type: other)
** Output digital (subtype: default)
** Output digital (subtype: cursor) 
** Output digital (subtype: message)

image::../images/UserPins.png[]

==== Generic Types & App mobile
The generic types are an addition of Jeedom for the operation of the mobile plug and the linked mobile app. +
For more information about them, please refer to their respective documentations.

If you have Jeedouino equipment for which you have already configured the generic type (in advanced setup) during the
update the plugin will try to recover them +
You can also use auto mode in which the plugin will try to find the generic type of most suitable. +
Otherwise you can choose the generic type in the plugin, and when creating commands the plugin will fit if possible.

[TIP]
For example, if you choose a pine _Sortie mise à LOW  (HIGH generated too) _ and the generic kind _LIGHT ON_, then the plugin will generate the commands (and vice versa): +
Sortie mise à LOW avec _LIGHT ON_ +
Sortie mise à HIGH avec _LIGHT OFF_ +
Etat de la sortie avec _LIGHT STATE_ +

image::../images/gt.png[]

[NOTE]
If on * a same equipment * you have a lot of orders as well as a lot of generic different type (e.g. LIGHT, ENERGY, FLAP, SIREN, etc..)
it is possible that the mobile app will not show you all, or generates an error. +
That certainly changes with future versions thereof. +
_Use of * groups virtual * to split the equipment is then adviced._ 

==== Virtual groups
* Prerequisite: have the virtual plugin installed and active.*

To activate the virtual groups, an option is present on the configuration page of the plugin.

image::../images/configuration5.png[]

You must then create the virtual equipment you need (with the plugin of course Virtual).

Later, when configuring the pines in your Jeedouino equipment, suffice to choose for each pine in which Virtual it must be duplicated.

image::../images/jeedouino_screenshot4.png[]

[TIP]
* An example to understand: * +
Example if you have in your garden in two places: +. 
NodeMCU a card with 8 relays that control 4 solenoid valves, 2 lights and a pond pump. +
A Raspberry with 4 relays card that control 2 solenoid valves, 1 lighting. +
 +
_So you have two separate equipment but with similar features you would like to group by fonction._ +
The Virtuals in Jeedom are there for that, but you need to copy the commands _manually_ . +
The Jeedouino virtual groups allow you to select them with a click, and let the plugin automatically does it. +
In this example you need to create the virtual: _Watering, Lighting, Pond._ +.
Then for each pin of each Jeedouino equipment  you set the corresponding virtual, and you save. +
_It remains for you to use your virtuals._

image::../images/virtuels.png[]

==== Equipment with daemons (rpi GPIO, piFace, pi Plus / MCP23017, Arduino USB) have changed port connection alone.
That is possible. +
Indeed, when starting a daemon tries to use the selected port 2 times with a waiting time of approximately 11s. +
If after these two attempts the port is still not available, so he tries to get one automatically. +
And if it finds one, it uses it and update the suitable equipment.

==== Equipment with demons (rpi GPIO, piFace, pi Plus / MCP23017, Arduino USB) are not directly functional after a reboot.
See below.

==== The daemons do not start after a reboot?
Daemons (rpi GPIO, piFace, pi Plus / MCP23017, Arduino USB) are only launched *about 4 minutes* after launching Jeedom.
This allows to try to ensure compatibility with somewhat slower systems (Ex: RPI 1, overloaded systems, etc...). + 
[NOTE]
If Jeedom slaves start also, the 4-minute time period begins after the last started Jeedom.
[TIP]
An *AutoReStart* option for the automatic start of daemons is present on the plugin configuration page (Daemons tab).

image::../images/configuration2.png[]

==== Is the plugin compatible with Docker?
Basically, not because of the specific configuration of Jeedom under Docker.

However an option in the plugin configuration page has been added to compensate for this. +
Must activate it, and fill in the IP Address of the host (one of NAS most often) and the port mapped (often 9080).

image::../images/docker1.png[]
In Jeedom network configuration, disable network management by Jeedom +
(Normally this is already the case, if your Docker operates properly).

image::../images/docker2.png[]

==== What means HIGH or LOW?
* Simply Low = 0 = GND, so it's setting to the low state of the pin.
* Simply High = 1 = Vcc, so setting the higher of the pin state.

==== What means Pull_Up or Pull_Down ?
* Simply Pull Up means that there is a resistance (internal circulation) between the data and the Vcc pin of the microcontroller.
This keeps the pin in the high state (= High = 1 = Vcc) and avoid interference voltages.
** This mode is often available, otherwise, simply put yourself in your electronic assembly a resistance.
* Simple Pull_Down means that there is a resistance (internal circulation) between the pine concerned and the Gnd of the microcontroller.
This keeps the pin in low state (= Low = 0 = GND) and avoid interference voltages.
** This mode is not often available, and in this case, simply put yourself in your electronic assembly a resistance.

==== What is the configuration (detailed) of pine as possible?
* *Pine Configuration*: Select the appropriate pins and assign them an input type function (info) or output (action).

[IMPORTANT]
* All functions of the pines are not available on all cards / microcontrollers, each ones having its own caracteristiques.*

[NOTE]
*Reminder*: it is not useful to have a function to each pin, but only those you need.
This will avoid the generation of unnecessary commands and to load too muwh Jeedom.

===== Input Pins: 
* *Analog*
** Allows to connect an analog sensor.
** Examples:
*** IR distance sensor
*** Sound intensity sensor
*** Ambient light sensor
*** Analog Rotary sensor
*** Etc..

* *Digital*.
** Allows you to connect a digital sensor (which returns a binary 0 / 1 i.e. low / high).
[NOTE]
In pull_up, the state of the input by default is HIGH (= 1), so put it to LOW (= 0) to trigger a signal. +
In pull_down, sate of the input by default is LOW (= 0), then put it at HIGH (= 1) to trigger a signal.

*** *Pulse counter* (Water meter, Electricity, Gas, Doors, Windows, IR gates, ...) +
It is possible to initialize the counter to a given value. +
The Reset button is used to send it to the card.

image::../images/compteur.png[]
*** *Digital Input in PULL-UP* (push button, switch, opening sensor, motion sensor ..)
*** *Digital Input Variable (0-255 on 10s)* (Pushbutton maintained from 0 to 10s to control via a dimmer scenario eg)
*** *HC-SR04 Echo* In connection with the trigger pin, retrieve the distance measured by the ultrasonic sensor.

image::../images/hc_sr04.png[]

*** *Only on Arduino / ESP / NodeMCU / Wemos :*
**** *Probe DHT11,21,22* - Allows for two commands, one for temperature and one for humidity.
**** *Probe DS18x20* - Allows for a command with temperature -. *1 probe max per pin*
**** *Input Teleinfo ERDF (RX pin)* - Allows for a message receiving order for the serial Teleinfo.
[TIP]
If you have Teleinfo plugin installed and activated, it will automatically create a Teleinfo equipment with the received serial
(It will need to activate the auto controls in this equipment). +
In this use case, if Teleinfo daemon stays on NOK, it's normal, it is not used.

*** *Only on Raspberry PI GPIO :*
**** *Probe DHT 11, 22 (AM2302)* - allows to have 2 commands, one for temperature, and one for the humidity.
**** *Sensor DS18B20* - allows to have a command  with temperature - *1 probe max by pin.*

*** *Uniquement sur Arduino / ESP / NodeMCU / Wemos et Raspberry PI GPIO :*
**** *Entrée Bouton poussoir avec PULL-DOWN*
**** *Entrée Bouton poussoir avec PULL-UP*
[NOTE]
Permet d'avoir une commande dont la valeur est le nombre d'appuis détectés successivement. +
Pour un appui long la valeur sera de 99.
[IMPORTANT]
*Sur piGpio, le fonctionnement multitâche du système ne permet pas une fiabilité à 100% de la détection des appuis.* +
J'essaierai d'améliorer ce point-là mais sans garantie. Pour tests uniquements.

===== Output pins: 
* *Only on Arduino / ESP / NodeMCU / Wemos :*
** *Send a message to LCD16x2* - allows you to send a title + message (16 characters each) on a screen LCD 16 x 2. Standard or I2C

image::../images/lcd.png[]

* *Digital*.
** Allows you to operate a digital receiver (relay, LED, etc ...)
*** * Invert output (Switch) * Puts the output to LOW (= 0) if it is a HIGH (= 1) and vice versa. WITHOUT knowing the previous state.
**** convenient to change the State of an led (flashing).
**** Operate a relay as a switch.
*** * Output setting to LOW (HIGH generated too) * Allows to have 2 commands to put out a LOW (= 0) or HIGH (= 1).
**** Convenient to force the state of an output in a scenario such.
*** * Output setting to LOW / HIGH with delay (timer) *. Turns out a LOW (= 0) or HIGH (= 1) for a limited time.
[NOTE]
Time expressed in tenths of seconds and 5 digits. Range from 0.1s to 9999.9s (about 166 minutes).
[TIP]
An opposite order (without delay) is also created in order to stop (earlier) the command timed pre-quoted (Stop Shutters for ex.).

**** Convenient to power a light x minutes / seconds.
**** Operate a relay less than a second for controlling a dry contact / toggle (eg 00007 for 0.7s).
**** Operate a relay with a solenoid valve to control watering the garden for a fixed period (eg 06000 for 10min).
**** Operate relay for opening / closing of shutters (eg 00400 for 40s). 
*** *HC-SR04 Trigger* In connection with the Echo pin, launch the distance measurement by the ultrasonic sensor.
* *Digital/pseudo-analog*.
*** *Output PWM*, adjusts the intensity of a compatible strip led by ex.




