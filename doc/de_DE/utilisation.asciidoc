=== Geräte erstellen

La configuration des équipements Jeedouino est accessible à partir du menu Plugins : 

image::../images/menuplugin.png[]

Voilà à quoi ressemble la page du plugin Jeedouino (ici avec déjà des équipements) : 

image::../images/equipements.png[]

[TIP]
Comme à beaucoup d'endroits sur Jeedom, placer la souris tout à gauche permet de faire apparaître un menu d'accès rapide (vous pouvez, à partir de votre profil, le laisser toujours visible).

Une fois que vous cliquez sur le bouton + (Ajouter un nouvel équipement), et après avoir donné un nom à votre équipement, vous obtenez : 

image::../images/equipements0.png[]

Vous retrouvez ici toute la configuration de votre équipement : 

* *Nom de l'équipement* : nom de votre équipement Jeedouino,
* *Objet parent* : indique l'objet parent auquel appartient l'équipement,
* *Activer* : permet de rendre votre équipement actif,
* *Visible* : rend votre équipement visible sur le dashboard.

En-dessous vous retrouvez le paramétrage de votre équipement : 

* *Modèle* : le Modèle de la carte que vous souhaitez controler,

image::../images/modeles.png[]

_Pour la carte PiFace, un numéro (de 0 à 3) est demandé pour l'identifier (Si vous avez un piRack par ex.)_

image::../images/piface.png[]
* *Port de connection* : type de connection USB ou Réseau,
* *Adresse IP et Port* : pour la connection à la carte via le réseau,
[WARNING]
Les démons (GPIO et Piface par ex.) pouvant êtres sur le même Jeedom, il faut veiller à utiliser des ports différents pour chacun. Normalement, à la création d'un équipement, un port de libre vous est proposé. +
_Si nécéssaire, le démon choisira un autre port en lieu et place de celui indiqué s'il s'avère impossible de l'utiliser._

[IMPORTANT]
Le port doit aussi être différent de celui du Jeedom hôte.
[TIP]
_Suivant, les navigateurs, une flèche apparaît permettant de choisir directement une IP parmis vos Jeedom._ +
Vous pouvez aussi utiliser _local_ ou _localhost_ pour l'adresse IP du Jeedom principal (maître).

image::../images/listeIP.png[]
* *Port USB* : Local ou déporté, pour la connection du Jeedom maître ou esclave à la carte via son port USB,
* *Port local/Port déporté* : Port USB physique ou est connectée la carte,
** Si vous débranchez/rebranchez la carte du port USB du RPI, il vous faudra redémarrer le démon correspondant.

image::../images/listeUSB.png[]
* *Port Démon* : pour la connection au démon via le réseau, l'IP du démon étant celle du Jeedom hôte.
[WARNING]
Les démons ( Arduino USB par ex.) pouvant êtres sur le même Jeedom, il faut veiller à utiliser des ports différents pour chacun. Normalement, à la création d'un équipement, un port de libre vous est proposé. +
_Si nécéssaire, le démon choisira un autre port en lieu et place de celui indiqué s'il s'avère impossible de l'utiliser._
[IMPORTANT]
Le port doit aussi être différent de celui du Jeedom hôte.
* *Sketch* : Dans le cas d'une carte Arduino ou ESP8266, le sketch pour celle-ci est proposé au téléchargement aprés une première sauvegarde de l'équipement. +
(NB. Rafraîchissement de la page, il peut être nécéssaire de faire un F5 pour voir apparaître le lien )
[NOTE]
Pour les modèles Ethernet (Arduinos), il est spécifiquement généré, en tenant compte de l'adresse IP choisie, du port choisi, et d'une adresse mac unique. 
 _Ainsi que de l'IP, du complément '/jeedom' (ou non) et du port du Jeedom maître ( d'après votre configuration réseau dans Jeedom)._
[TIP]
_Le Sketch est par défaut prévu pour les shields avec chip W5100, mais il peut fonctionner aussi avec des ENC28J60. Dans ce cas, il faudra lire et appliquer la procédure présente en entête du sketch._

image::../images/sketch.png[]
[NOTE]
Pour les modèles WiFi (ESP8266), il est spécifiquement généré, en tenant compte du port, du SSID, et du mot de passe wifi, l'adresse IP étant renvoyée par la carte.
 _Ainsi que de l'IP, du complément '/jeedom' (ou non) et du port du Jeedom maître ( d'après votre configuration réseau dans Jeedom)._
_NB. Il faut tout de même renseigner l'adressse IP la premiére fois._

[WARNING]
Les _SSID_ et _mot de passe_ ne doivent pas contenir d'espaces !

image::../images/ESP.png[]

==== Configuration des pins

* Modal Paramétrages / affectation des pins

Permet de sélectionner les pins voulues et de leur affecter une fonction de type entrée (info) ou sortie (action). + 
_NB : Des compléments d'infomations sont disponibles dans la FAQ._ +

** Entrées: Analogiques, Digitales, Compteur d'impulsions
** Sorties: Low (=0=Gnd), High (=1=Vcc), Switch (inverse la sortie), Pulse (mettre la sortie à low ou high pendant une durée limitée - ex.:actionner momentanément, via un relais, un télérupteur, une électrovanne, un volet, un contact sec, etc..). 

image::../images/jeedouino_screenshot4.png[]

[IMPORTANT]
*_Les Pins seront configurables uniquement après une première sauvegarde de votre équipement._* + 
Une fois celles-ci configurées et sauvées (dans la fenêtre de modale), une sauvegarde de l'équipement générera toutes les commandes nécéssaires.
[NOTE]
Il n'est pas utile de donner une fonction à chaque pin, mais uniquement à celles dont vous avez besoin.
Cela évitera la génération de commandes inutiles et de trop charger Jeedom.

[TIP]
Il est désormais possible de configurer les generic type directement, et d'affecter les pins à des groupes (équipements) virtuels, voir la FAQ.

* Modal Paramétrages / affectation des pins utilisateur

image::../images/UserPins.png[]

* Onglet Pins / GPIO +

Permet d'ajouter un certain nombre de pins utilisateur pour vos sketch Arduinos/ESPs : _0 à 100 max_ +

Il est possible d'activer ou non la génération automatique des commandes ALL_

** ALL_LOW	Met toutes les pins output à LOW
** ALL_HIGH	Met toutes les pins output à HIGH
** ALL_SWITCH	Inverse toutes les pins output
** ALL_PULSE_LOW	Met toutes les pins output à LOW pendant le temps choisi
** ALL_PULSE_HIGH	Met toutes les pins output à HIGH pendant le temps choisi

image::../images/ALLpins.png[]

==== Befehle 

image::../images/jeedouino_screenshot5.png[]
* *Sauvegarde de l'équipement* : Les commandes sont générées automatiquement, le démon est démarré si nécéssaire, la configuration des pins est envoyée à la carte ( Arduino, RPI, PiFace ) ainsi que quelques autres paramêtres.
Ansi, la roue crantée tournante peut rester affichée un bon moment. Il ne faut donc pas s'en inquièter.



* Les commandes sont créées automatiquement lors de la sauvegarde de l'équipement.

** Il est bien sûr possible de renommer les commandes.
[NOTE]
Pour chaque commande de type 'action', une commande de type 'info' de retour d'état est aussi créée _(si utile)_.

* Les boutons _Afficher_ et _Historiser_ sont les boutons habituels d'affichage (ou non) de la commande sur le widget et de son historisation (ou non).

* Le bouton _Inverser (colonne Affichage)_ permet d'inverser le résultat d'une commande info (sous-type binaire) sur le dashboard par ex.

* Le bouton _Inverser (colonne Valeur)_ permet d'inverser le résultat d'une commande info (sous-type binaire) avant de la fournir à Jeedom.

* Le bouton _Tester_ permet de...tester une commande action par ex.

Il n'est pour l'instant pas prévu de pouvoir ajouter des commandes manuellement.

[TIP]
Pour les commandes info de type 'compteur', elles sont remises a la valeur stockée dans l'équipement à chaque sauvegarde de celui-ci.
A l'inverse, après un reboot de l'arduino (par ex.), la derniére valeur est recupérée auprès du Jeedom maître.
Si une erreur de communication survient a ce moment la, le compteur sera réinitialisé à zéro. + 
Sur Arduino/ESP / NodeMCU / Wemos, il est possible de les ré-initialiser à une valeur spécifique, une option "reset" est présente sur la commande de l'équipement concerné.

==== Widgets

Ce sont ceux par défaut de Jeedom.

Les widgets desktop ressemblent à cela :

image::../images/desktop_widget.png[]
