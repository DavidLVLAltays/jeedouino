=== Geräte erstellen

Die Jeedouino Geräte Konfiguration ist erreichbar über das Plugin-Menü : 

image::../images/menuplugin.png[]

Dies ist die Seite des Jeedouino Plugins (hier bereits mit Geräten) : 

image::../images/equipements.png[]

[TIP]
Wie an vielen Stellen in Jeedom, bewegt man die Maus ganz nach links, erscheint ein Schnellzugangs Menü (Sie können es in Ihrem Profil immer sichtbar einstellen).

Sobald Sie auf die Schaltfläche + (ein neues Gerät hinzufügen) geklickt und dann einen Namen für das Gerät eingegeben haben, sehen Sie : 

image::../images/equipements0.png[]

Hier finden Sie die ganze Konfiguration des Geräts: 

* *Gerätename* : Name des Jeedouino Geräts,
* *Elternobjekt* : gibt das übergeordnete Objekt an, das zum Gerät gehört,
* *Aktivieren* : erlaubt es, Ihre Gerät zu aktivieren,
* *Sichtbar* : macht Ihr Gerät auf dem Armaturenbrett sichtbar.

Darunter finden Sie die Parametrierung Ihrer Geräte wieder : 

* *Model* : Das Modell der Karte, die Sie steuern möchten,

image::../images/modeles.png[]

_Für PiFace Karte, wird eine Nummer (0 bis 3) benötigt, zur Identifizierung (Wenn Sie z. B. eine PiRack haben)_

image::../images/piface.png[]
* *Type de connection* : port de connection USB ou Réseau,
* *IP Adresse und Port* : für die Verbindung der Karte über das Netzwerk,
[WARNING]
Les démons (GPIO et Piface par ex.) pouvant êtres sur le même Jeedom, il faut veiller à utiliser des ports différents pour chacun. Normalement, à la création d'un équipement, un port de libre vous est proposé. +
_Si nécéssaire, le démon choisira un autre port en lieu et place de celui indiqué s'il s'avère impossible de l'utiliser._

[IMPORTANT]
Der Port muss sich vom Jeedom Host unterscheiden.
[TIP]
_Als nächstes im Browser wird ein Pfeil angezeigt, um in Jeedom eine IP-Adresse direkt auswählen._ +
Sie können auch _lokal_ oder _lokalhost_ für die IP-Adresse des primär Jeedom (Master) verwenden.

image::../images/listeIP.png[]
* *USB Port* : Lokale oder Remote, für den Anschluss vom Jeedom Master oder Slave an die Karte, über den USB-Port,
* *Port local/Port déporté* : Port USB physique où est connectée la carte,
** Wenn Sie den USB-Port von der RPI-Karte trennen/verbinden, müssen Sie den entsprechenden Daemon neu starten. 

image::../images/listeUSB.png[]
* *Port Démon* : pour la connection au démon via le réseau, l'IP du démon étant celle du Jeedom hôte.
[WARNING]
Les démons ( Arduino USB par ex.) pouvant êtres sur le même Jeedom, il faut veiller à utiliser des ports différents pour chacun. Normalement, à la création d'un équipement, un port de libre vous est proposé. +
_Si nécéssaire, le démon choisira un autre port en lieu et place de celui indiqué s'il s'avère impossible de l'utiliser._
[IMPORTANT]
Der Port muss sich vom Jeedom Host unterscheiden.
* *Sketch* : Dans le cas d'une carte Arduino ou ESP8266, le sketch pour celle-ci est proposé au téléchargement aprés une première sauvegarde de l'équipement. +
(NB. Rafraîchissement de la page, il peut être nécéssaire de faire un F5 pour voir apparaître le lien )
[NOTE]
Pour les modèles Ethernet (Arduinos), il est spécifiquement généré, en tenant compte de l'adresse IP choisie, du port choisi, et d'une adresse mac unique. 
 _Ainsi que de l'IP, du complément '/jeedom' (ou non) et du port du Jeedom maître ( d'après votre configuration réseau dans Jeedom)._
[TIP]
_Le Sketch est par défaut prévu pour les shields avec chip W5100, mais il peut fonctionner aussi avec des ENC28J60. Dans ce cas, il faudra lire et appliquer la procédure présente en entête du sketch._

image::../images/sketch.png[]
[NOTE]
Pour les modèles WiFi (ESP8266), il est spécifiquement généré, en tenant compte du port, du SSID, et du mot de passe wifi, l'adresse IP étant renvoyée par la carte.
 _Ainsi que de l'IP, du complément '/jeedom' (ou non) et du port du Jeedom maître ( d'après votre configuration réseau dans Jeedom)._
_NB. Il faut tout de même renseigner l'adressse IP la premiére fois._

[WARNING]
Les _SSID_ et _mot de passe_ ne doivent pas contenir d'espaces !

image::../images/ESP.png[]

==== Pin Konfiguration

* Modal Paramétrages / affectation des pins

Permet de sélectionner les pins voulues et de leur affecter une fonction de type entrée (info) ou sortie (action). + 
_NB : Des compléments d'infomations sont disponibles dans la FAQ._ +

** Eingänge: Analog, Digital, Impulszähler
** Sorties: Low (=0=Gnd), High (=1=Vcc), Switch (inverse la sortie), Pulse (mettre la sortie à low ou high pendant une durée limitée - ex.:actionner momentanément, via un relais, un télérupteur, une électrovanne, un volet, un contact sec, etc..). 

image::../images/jeedouino_screenshot4.png[]

[IMPORTANT]
*_Die Pins können erst nach einem ersten speichern des Gerätes konfiguriert werden._* + 
Une fois celles-ci configurées et sauvées (dans la fenêtre de modale), une sauvegarde de l'équipement générera toutes les commandes nécéssaires.
[NOTE]
Il n'est pas utile de donner une fonction à chaque pin, mais uniquement à celles dont vous avez besoin.
Das wird die Erstellung unnötiger Befehle vermeiden und Jeedom nicht zu sehr beladen.

[TIP]
Il est désormais possible de configurer les generic type directement, et d'affecter les pins à des groupes (équipements) virtuels, voir la FAQ.

* Modal Paramétrages / affectation des pins utilisateur

image::../images/UserPins.png[]

* Registerkarte Pins / GPIO +

Erlaubt, einige Benutzer Pins für Ihre Arduino/ESP Sketche hinzuzufügen : _0 bis max 100_ +

Es ist möglich, die automatische Generierung der ALL_ Befehle zu aktivieren oder zu deaktivieren 

** ALL_LOW	stellt alle Ausgangs Pins auf LOW
** ALL_HIGH	stellt alle Ausgangs Pins auf HIGH
** ALL_SWITCH	Invertiert alle Ausgangs Pins
** ALL_PULSE_LOW	stellt alle Ausgangs Pins auf LOW, während der ausgewählten Zeit
** ALL_PULSE_HIGH	stellt alle Ausgangs Pins auf HIGH, während der ausgewählten Zeit

image::../images/ALLpins.png[]

==== Befehle 

image::../images/jeedouino_screenshot5.png[]
* *Sauvegarde de l'équipement* : Les commandes sont générées automatiquement, le démon est démarré si nécéssaire, la configuration des pins est envoyée à la carte ( Arduino, RPI, PiFace ) ainsi que quelques autres paramêtres.
Ansi, la roue crantée tournante peut rester affichée un bon moment. Il ne faut donc pas s'en inquièter.



* Les commandes sont créées automatiquement lors de la sauvegarde de l'équipement.

** Il est bien sûr possible de renommer les commandes.
[NOTE]
Pour chaque commande de type 'action', une commande de type 'info' de retour d'état est aussi créée _(si utile)_.

* Les boutons _Afficher_ et _Historiser_ sont les boutons habituels d'affichage (ou non) de la commande sur le widget et de son historisation (ou non).

* Le bouton _Inverser (colonne Affichage)_ permet d'inverser le résultat d'une commande info (sous-type binaire) sur le dashboard par ex.

* Le bouton _Inverser (colonne Valeur)_ permet d'inverser le résultat d'une commande info (sous-type binaire) avant de la fournir à Jeedom.

* Le bouton _Tester_ permet de...tester une commande action par ex.

Il n'est pour l'instant pas prévu de pouvoir ajouter des commandes manuellement.

[TIP]
Pour les commandes info de type 'compteur', elles sont remises a la valeur stockée dans l'équipement à chaque sauvegarde de celui-ci.
A l'inverse, après un reboot de l'arduino (par ex.), la derniére valeur est recupérée auprès du Jeedom maître.
Si une erreur de communication survient a ce moment la, le compteur sera réinitialisé à zéro. + 
Sur Arduino/ESP / NodeMCU / Wemos, il est possible de les ré-initialiser à une valeur spécifique, une option "reset" est présente sur la commande de l'équipement concerné.

==== Widgets

Diese sind Standardmäßig in Jeedom.

Desktop-Widgets sind ähnlich wie dieses :

image::../images/desktop_widget.png[]
