=== FAQ

==== Persönliche/modifizierbare Sketche und Benutzerbefehle

===== Sketch Header
Mit den neuen Funktionalitäten können die Sketchs für die „kleinen“ Arduinos zu schwerfällig werden. +
Es ist daher möglich, einige von diesen Funktionalitäten zu deaktivieren, wenn es erforderlich ist, um die Sketche zu entschärfen. +
Diese Möglichkeiten finden Sie in der Sketch Header : 

[NOTE]
*#define DEBUGtoSERIAL 0*	// 0 oder 1 für Debug in der seriellen Konsole
*#define UseWatchdog 0* +
*#define UseDHT 1* +
*#define UseDS18x20 1* +
*#define UseTeleInfo 0* +
*#define UseLCD16x2 0*	// 0 = None(kein) / 1 = LCD Standard 6 pins / 2 = LCD via I2C +
_Ermöglicht Ihnen, persönlichen Sketche hinzuzufügen_ +
*#define UserSketch 0* +
_Tags, um den Ort für Ihren Code zu suchen :_ +
_UserVars_ +
_UserSetup_ +
_UserLoop_ +

Für ESP Sketche ist es auch möglich, von dem System eine freie IP-Adresse (DHCP) zuweisen zu lassen
oder wenn nötig zu erzwingen.
[TIP]
*#define NODHCP 0*					// 0 für IP mit DHCP, 1 für in der Sketche fixierte IP.

===== Sketche und Benutzer Pins
Für Ihre persönlichen Sketche reicht es aus, sich die Sketchen anzusehen, alles wird mit Beispielen angezeigt. +
[NOTE]
Pensez à activer l'option dans la page de configuration du plugin, et à selectionner le nombre de pins désirées sous l'onglet Pins/GPIO de votre équipement. +
Sie werden in der Registerkarte Benutzer Pins (neben den Hardware-Pins) im modalen Fenster angezeigt.

Pour les commandes liées coté Jeedom, il suffit de les configurer comme pour les pins matérielles.

* Sie können aus 3 Typen von Eingangs-Pins und 3 Arten von Ausgangs-Pins wählen:
** Digitaleingang (Unter-typ : binär)
** Digitaleingang (Sous-type : numerisch)
** Digitaleingang (Unter-typ : andere)
** Digitalausgang (Unter-typ : Standard)
** Digitalausgang (Unter-typ : Schieberegler) 
** Digitalausgang (Unter-typ : Nachricht)

image::../images/UserPins.png[]

==== Generische Typen & mobile App
Die generischen Typen sind ein Zusatz von Jeedom für den Betrieb des Mobile-Plugin und der Verknüpfung der mobilen App.
Weitere Informationen finden Sie in den jeweiligen Dokumentationen.

Wenn Sie Jeedouino Geräte haben, für die Sie bereits den generischen Typ (in der erweiterten Konfiguration) konfiguriert haben, wird das Plugin 
während der Aktualisierung versuchen sie wieder herzustellen. +
Sie können auch den Auto-Modus benutzen, mit dem das Plugin versuchen wird, den am besten Angepassten generischen Typ zu finden. + 
Andernfalls können Sie den generischen Typ im Plugin wählen, und bei der Erstellung der Befehle wird das Plugin wenn möglich sie anpassen.

[TIP]
Par exemple, si vous choisissez une pin en _Sortie mise à LOW (HIGH générée aussi)_ et le generic type _LIGHT ON_ , alors le plugin générera les commandes (et vice-versa): +
Ausgang auf LOW mit _LIGHT ON_ +
Ausgang auf HIGH mit _LIGHT ON_ +
Ausgangsstatus mit _LIGHT STATE_ +

image::../images/gt.png[]

[NOTE]
Si sur *un même équipement* vous avez beaucoup de commandes ainsi que beaucoup de generic type différents ( par ex. LIGHT, ENERGY, FLAP, SIREN, etc..)
il est possible que l'app mobile ne vous les affichent pas tous, ou génére une erreur. +
Cela évoluera certainement avec les futures versions de celle-ci. +
_L'utilisation de *Groupes Virtuels* pour scinder les équipements est alors conseillée._ 

==== Virtuelle Gruppen
*Pré-requis : avoir le plugin Virtuel installé et activé.*

Pour activer les groupes virtuels, une option est présente sur la page de configuration du plugin.

image::../images/configuration5.png[]

Il faut ensuite créer les équipements virtuels dont vous aurez besoin (avec le plugin Virtuel bien-sûr).

Par la suite, lors de la configuration des pins dans vos équipements Jeedouino, il suffira d'indiquer pour chaque pin dans quel Virtuel, elle doit  être dupliquée.

image::../images/jeedouino_screenshot4.png[]

[TIP]
*Un exemple pour bien comprendre :* +
Mettons que vous avez dans votre jardin en deux endroits : + 
Un NoneMCU avec une carte 8 relais qui commande 4 electrovannes, 2 éclairages et une pompe de bassin. +
Un Raspberry avec une carte 4 relais qui commande 2 electrovannes, 1 éclairage. +
 +
_Vous avez donc 2 équipements séparés mais avec des fonctionalitées similaires que vous aimeriez regrouper par fonction._ +
Les virtuels de Jeedom sont là pour ça, mais il vous faut copier les commandes _manuellement_. +
Les groupes virtuels de Jeedouino vous permettent de les sélectionner d'un clic, et de laisser faire le plugin automatiquement. +
Dans cet exemple vous n'avez qu'à créer les virtuels : _Arrosage, Eclairage, Bassin._ +
Puis pour chaque pin de chaque équipement Jeedouino vous affectez le bon virtuel, et vous sauvez. +
_Il ne vous reste plus qu'à utiliser vos virtuels._

image::../images/virtuels.png[]

==== Les équipements avec démons ( piGPIO, piFace, piPlus/MCP23017, ArduinoUSB ) ont changés de port de connection tout seuls.
Cela est possible. +
En effet, lors du démarrage, un démon essaye d'utiliser le port choisi a 2 reprises avec un délai d'attente d'environ 11s. +
Si au bout de ces 2 tentatives le port n'est toujours pas disponible, alors il essaie d'en trouver un de libre automatiquement. +
Et s'il en trouve un, il l'utilise et met à jour l'équipement idoine.

==== Les équipements avec démons ( piGPIO, piFace, piPlus/MCP23017, ArduinoUSB ) ne sont pas directement fonctionnels après un reboot.
Voir ci-dessous.

==== Les démons  ne démarrent pas aprés un reboot ?
Les démons ( piGPIO, piFace, piPlus/MCP23017, ArduinoUSB ) ne sont relancés *qu'environ 4 minutes* après le lancement de Jeedom.
Cela permet d'essayer d'assurer une compatibilité avec les systèmes un peu plus lents (Ex: RPI 1, Systèmes chargés, etc...). + 
[NOTE]
Si des Jeedom esclaves démarrent aussi, le délai de 4 minutes débute après le dernier Jeedom démarré.
[TIP]
Une option *AutoReStart* permettant le redémarrage automatique des démons est présente sur la page de configuration du plugin (onglet Démons).

image::../images/configuration2.png[]

==== Le plugin est-il compatible Docker ?
A la base, non à cause de la configuration spécifique du Jeedom sous docker.

Cependant une option, dans la page de configuration du plugin a été ajoutée pour pallier à cela. +
Il faut l'activer, et renseigner l'IP de l'hôte (Celle du NAS le plus souvent) et le port mappé (souvent 9080).

image::../images/docker1.png[]
Dans la configuration réseau de Jeedom, il faut désactiver la gestion du réseau par Jeedom +
( Normalement c'est déja la cas, si votre installation docker fonctionne correctement).

image::../images/docker2.png[]

==== Que signifient LOW ou HIGH ?
* Pour faire simple Low = 0 = Gnd, c'est donc la mise à l'état bas de la pin.
* Pour faire simple High = 1 = Vcc , c'est donc la mise à l'état haut de la pin.

==== Que signifient Pull_Up ou Pull_Down ?
* Pour faire simple Pull_Up signifie qu'il y a une résistance (interne de tirage) entre la pin concernée et le Vcc du Microcontrôleur.
Cela permet de maintenir la pin à l'etat haut (=High=1=Vcc) et d'éviter des tensions parasites.
** Ce mode est souvent disponible, dans le cas contraire, il vous suffit de mettre vous même une résistance dans votre montage.
* Pour faire simple Pull_Down signifie qu'il y a une résistance (interne de tirage) entre la pin concernée et le Gnd du Microcontrôleur.
Cela permet de maintenir la pin à l'etat bas (=Low=0=Gnd) et d'éviter des tensions parasites.
** Ce mode n'est pas souvent disponible, et dans ce cas, il vous suffit de mettre vous même une résistance dans votre montage.

==== Quelle est la configuration (détaillée) des pins possible ?
* *Configuration des pins* : Permet de sélectionner les pins voulues et de leur affecter une fonction de type entrée (info) ou sortie (action).

[IMPORTANT]
*Toutes les fonctions des pins ne sont pas forcément disponibles sur toutes les cartes / microcontrôleurs, chacun ayant ses propres caractéristiques.*

[NOTE]
*Rappel* : Il n'est pas utile de donner une fonction à chaque pin, mais uniquement à celles dont vous avez besoin.
Cela évitera la génération de commandes inutiles et de trop charger Jeedom.

===== Pins Entrées (Input): 
* *Analogiques*
** Permet de brancher un capteur analogique.
** Beispiel:
*** Capteur de distance IR
*** Capteur d’intensité sonore
*** Capteur de lumière ambiante
*** Capteur rotatif analogique
*** Etc..

* *Numériques*
** Permet de brancher un capteur numérique (qui renvoie un binaire 0 / 1 i.e low / high).
[NOTE]
En pull_up, l'état de l'entrée au repos est HIGH (=1), il faut la mettre à LOW (=0) pour déclencher un signal. +
En pull_down, l'état de l'entrée au repos est LOW (=0), il faut la mettre à HIGH (=1) pour déclencher un signal.

*** *Compteur d'impulsions* (Compteur d'Eau , Electricité, Gaz, Portes, Fenêtres, Barrières IR, ... ) +
Il est possible d'initialiser le compteur a une valeur donnée. +
Le bouton Reset sert a l'envoyer à la carte.

image::../images/compteur.png[]
*** *Entrée Numérique en PULL-UP* (Bouton poussoir, interrupteur, capteur d'ouverture, capteur de mouvement.. )
*** *Entrée Numérique Variable (0-255 sur 10s)* (Bouton poussoir maintenu de 0 à 10s pour commander via scénario un variateur par ex)
*** *HC-SR04 Echo* En lien avec la pin Trigger, permet de récupérer la distance mesurée par le capteur ultrason.

image::../images/hc_sr04.png[]

*** *Uniquement sur Arduino / ESP / NodeMCU / Wemos :*
**** *Sonde DHT11,21,22* - Permet d'avoir 2 commandes, une pour la température, et une pour l'humidité.
**** *Sonde DS18x20* - Permet d'avoir une commande avec la température - *1 sonde max par pin.*
**** *Entrée téléinfo ERDF ( pin RX )* - Permet d'avoir une commande de réception de message série pour la téléinfo.
[TIP]
Si vous avez le plugin Téléinfo d'installé et d'activé, cela crééra automatiquement un équipement téléinfo avec la trame reçue
(il faudra activer les commandes auto dans cet équipement). +
Dans ce cas d'utilisation, si le démon Téléinfo reste sur NOK, c'est normal, il n'est pas utilisé.

*** *Uniquement sur Raspberry PI GPIO :*
**** *Sonde DHT 11, 22 (AM2302)* - Permet d'avoir 2 commandes, une pour la température, et une pour l'humidité.
**** *Sonde DS18B20* - Permet d'avoir une commande avec la température - *1 sonde max par pin.*

===== Pins Sorties (output): 
* *Uniquement sur Arduino / ESP / NodeMCU / Wemos :*
** *Envoi d'un message sur LCD16x2* - Permet d'envoyer un titre + message (16 caractères chaque) sur un écran LCD 16x2. Standard / I2C

image::../images/lcd.png[]

* *Numériques*
** Permet d'actionner un récepteur numérique ( relais, led, etc ... )
*** *Inverser la sortie (Switch)*, Permet de mettre la sortie a LOW (=0) si elle est a HIGH (=1), et vice-versa. SANS connaître l'état précédent.
**** Pratique pour changer l'état d'une led (clignotement).
**** Actionner un relais comme un interrupteur (un coup, j'allume, un coup j'éteints.)
*** *Sortie mise à LOW (HIGH générée aussi)*, Permet d'avoir 2 commandes pour mettre la sortie a LOW (=0) ou a HIGH (=1).
**** Pratique pour forcer l'état d'une sortie dans un scénario par ex.
*** *Sortie mise à LOW/HIGH avec temporisation (minuterie)*. Permet de mettre la sortie a LOW (=0) ou a HIGH (=1) pendant une durée limitée.
[NOTE]
Durée exprimée en dixième de secondes et 5 chiffres max. Soit de 0.1s a 9999.9s (env 166 minutes).
[TIP]
Une commande opposée (sans temporisation) est aussi créée afin de pouvoir stopper (plus tôt) la commande temporisée pré-citée (Stop Volets par ex.).

**** Pratique pour actionner une lumiere x minutes/secondes.
**** Actionner un relais moins d'une seconde pour commander un contact sec / télérupteur (ex: 00007 pour 0,7s).
**** Actionner un relais d'une élèctrovanne pour commander l'arrosage du jardin pendant un durée déterminée (ex: 06000 pour 10min).
**** Actionner des relais pour l'ouverture/fermeture de volets roulants (ex: 00400 pour 40s). 
*** *HC-SR04 Trigger* En lien avec la pin Echo, permet de lancer la mesure de la distance par le capteur ultrason.
* *Numériques/pseudo-Analogiques*
*** *Sortie PWM*, Permet de régler l'intensité d'un ruban led compatible par ex.




